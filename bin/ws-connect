#!/bin/bash
MASH_WS_PID="$$"
export MASH_WS_PID
[ -z $MASH_STATUS_DIR ] && MASH_STATUS_DIR='.mash_tmp'
[ -d $MASH_STATUS_DIR ] || mkdir "$MASH_STATUS_DIR"

PIPE="$MASH_STATUS_DIR/ws_pipe"
if [ -f $PIPE ]; then
    echo "A instance of the connection script its already using '$MASH_STATUS_DIR'"
    echo 'If not, delete the ws_pipe'
    exit 1
fi
mkfifo $PIPE
exec 3<> ${PIPE}
ACKF="$MASH_STATUS_DIR/ws_lastack"
[ -f $ACKF ] || touch $ACKF
SEQF="$MASH_STATUS_DIR/ws_seqf"
[ -f $SEQF ] || touch $SEQF
SESF="$MASH_STATUS_DIR/ws_sessionid"
[ -f $SESF ] || touch $SESF

clean(){
	rm $PIPE
	kill 0
}
trap clean EXIT

gateway(){
   	echo "{\"op\": $1, \"d\": $2}" | jq -cM >&3
}

heartbeat(){
	LACK="0"
	WAIT=15
	INTERVAL=$(awk -v m=$m "BEGIN { print ($1 / 1000) - $WAIT }")
	while true; do
		SEQ=$(cat "$SEQF")
		gateway 1 "$SEQ" >&3
		ACK=$(cat "$ACKF")

		sleep "$WAIT"
		if [ "$LACK" == "$ACK" ]; then
			pkill -9 $MASH_WS_PID
			exit 1	
		fi

		sleep "$INTERVAL"
		LACK=$ACK
	done
}

while read -r PAYLOAD; do
	OP=$(echo "$PAYLOAD" | jq -r '.op')
	DATA=$(echo "$PAYLOAD" | jq '.d')

	case $OP in
	0)
	echo "$(echo "$PAYLOAD" | jq -r '.s')" > $SEQF
	echo "$PAYLOAD" ;;	
	1)
	echo "$(echo "$PAYLOAD" | jq '.d' | jq '.session_id')" > $SESF ;;
	7)
	exit 1 ;;
	9)
	rm $SESF
	exit 1 ;;
	10)
	INTERVAL=$(echo "$DATA" | jq '.heartbeat_interval')
	heartbeat "$INTERVAL" &

	if [ -f "$SESF" ]; then
		gateway 2 "{\"token\": \"$MASH_AUTH_TOKEN\", \"properties\": {\"\$os\": \"linux\",\"\$browser\": \"mash\",\"\$device\": \"mash\"}}"
	else
		SEQ=$(cat $SEQF); SES=$(cat $SESF)
		gateway 6 "{\"token\": \"$MASH_AUTH_TOKEN\", \"session_id\": \"$SES\", \"seq\": $SEQ}"
	fi ;;
	11)
	echo "$(( $(date +%s%N)/1000000 ))" > $ACKF ;;
	esac	
done < <(websocat -tnE "wss://gateway.discord.gg/?v=6&encoding=json" < $PIPE)
