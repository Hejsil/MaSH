#!/bin/bash
MASH_WS_PID="$$"
export MASH_WS_PID

[ -z "$MASH_STATUS_DIR" ] && MASH_STATUS_DIR='.mash_tmp'
[ -d "$MASH_STATUS_DIR" ] || mkdir "$MASH_STATUS_DIR"

PIPE="$MASH_STATUS_DIR/ws_pipe"
rm -f $PIPE; mkfifo $PIPE
exec 3<> $PIPE
LOGF="$MASH_STATUS_DIR/ws_log"
rm -f $LOGF; touch $LOGF

ACKF="$MASH_STATUS_DIR/ws_lastack"
[ -f $ACKF ] || touch $ACKF
SEQF="$MASH_STATUS_DIR/ws_seqf"
[ -f $SEQF ] || touch $SEQF
SESF="$MASH_STATUS_DIR/ws_sessionid"
[ -f $SESF ] || touch $SESF

ws-funnel &
trap 'kill 0' EXIT

heartbeat(){
	LACK="0"
	WAIT=15
	INTERVAL=$(awk "BEGIN { print ($1 / 1000) - $WAIT }")
	while true; do
		SEQ=$(cat "$SEQF")
		SEQ=${SEQ:-0}
		echo "$SEQ" | ws-send 1
		ACK=$(cat "$ACKF")

		sleep "$WAIT"
		if [ "$LACK" == "$ACK" ]; then
			pkill -9 $MASH_WS_PID
			$0 "$@"; exit
		fi

		sleep "$INTERVAL"
		LACK=$ACK
	done
}

while read -r PAYLOAD; do
	OP=$(echo "$PAYLOAD" | jq -r '.op')
	DATA=$(echo "$PAYLOAD" | jq -cM '.d')

	case $OP in
	0)
	echo "$PAYLOAD" | jq -r '.s' > $SEQF
	if [ "$(echo "$PAYLOAD" | jq -r '.t')" == 'READY' ]; then
		echo "$DATA" | jq -r '.session_id' > $SESF
	fi
	echo "$PAYLOAD" >> $LOGF
	echo "$PAYLOAD" ;;	
	7)
	$0 "$@"; exit ;;
	9)
	rm -f $SESF
	$0 "$@"; exit ;;
	10)
	INTERVAL=$(echo "$DATA" | jq -r '.heartbeat_interval')
	heartbeat "$INTERVAL" &

	[ -f "$SESF" ] && SES=$(cat $SESF)
	if [ -z "$SES" ]; then
		echo "{\"token\": \"$MASH_AUTH_TOKEN\", \"properties\": {\"\$os\": \"linux\",\"\$browser\": \"mash\",\"\$device\": \"mash\"}}" | ws-send 2
	else
		SEQ=$(cat $SEQF); SEQ=${SEQ:-0}
		echo "{\"token\": \"$MASH_AUTH_TOKEN\", \"session_id\": \"$SES\", \"seq\": $SEQ}" | ws-send 6
	fi ;;
	11)
	echo "$(( $(date +%s%N)/1000000 ))" > $ACKF ;;
	esac	
done < <(websocat -tnE "wss://gateway.discord.gg/?v=6&encoding=json" < $PIPE)
