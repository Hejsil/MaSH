#!/bin/sh
# shellcheck disable=SC2016
true

_429_handling(){
    ret=0
    code="$(printf '%s\n' "$1" | head -n 1 | cut -d' ' -f2)"

    if [ "$code" = 429 ]; then
        if [ -n "$2" ]; then
            retry=$(printf '%s\n' "$(printf '%s\n' "$2" \
                                     | jq -r '.retry_after') / 1000" | bc -l)
            global=$(printf '%s\n' "$2" | jq -r '.global')
        else
            num="$(printf '%s\n' "$1" | grep 'retry-after:' \
                   | cut -d' ' -f2 | tr -d '')"
            retry="$(printf '%s\n' "$num / 1000" | bc -l)"
            global='false'
        fi
        [ "$global" = "true" ] && id=4 || id=3
        flock "$id"; sleep "$retry"; flock -u "$id"
        ret=1
    fi

    return "$ret"
}

_predict_limit(){
    remaining="$(printf '%s\n' "$1" | grep -i "x-ratelimit-remaining" \
                 | sed 's/[^0-9]*//g')"
    if [ -n "$remaining" ]; then
        if [ "$remaining" -lt 1 ]; then
            flock 3
            reset="$(printf '%s\n' "$1" | grep -i "x-ratelimit-reset-after" \
                     | sed 's/[^0-9]*//g')"
            sleep "$reset"
            flock -u 3
        fi
    fi
}

_ret_code(){
    code="$(printf '%s\n' "$1" | head -n 1 | cut -d' ' -f2)"

    case "$code" in
    4*|5*) ret=1 ;;
    *)  ret=0 ;;
    esac

    printf '%s\n' "$ret"
}
    

# shellcheck disable=SC2086
_dapi(){
    if ! (mash_tools home 2>&1) > /dev/null; then
        printf '%s\n' "mash_api: Couldn't find home"
        return 1
    fi

    header_file="$(mktemp)"
    useragent="DiscordBot (https://github.com/Naranbataar/MaSH/ 2.1)"
    route="$(printf '%s\n' "$2" | cut -d'/' -f-3 | tr '/' '_')"
    token="$(cat "$(mash_tools home)/config/token")"
    bot="$(cat "$(mash_tools home)/config/bot")"
    if [ "$bot" = 'true' ]; then
        bot='Bot '
    else
        unset bot
    fi

    read -r text
    while true; do
        exec 3> "$(mash_tools home)/lock/$route"; flock -s 3
        exec 4> "$(mash_tools home)/lock/global"; flock -s 4
        
        if [ "$1" = '@FILES' ]; then
            n=0
            files="$(printf '%s\n' "$3" | jq '.[]' \
                     | while read -r f; do
                           printf "%sF 'file%s=@%s' " '-' "$n" "$f"
                           n=$(( n+1 ))
                       done)"
            result="$(curl -s -X "POST" -D "$header_file" \
                      -A "$useragent" \
                      -H "Authorization: $bot$token" \
                      -F "payload_json=$text" \
                      $files "https://discordapp.com/api/v6$2")"
        else
            if [ -n "$text" ] && [ "$text" != ' ' ]; then
                printf '%s\n' "$text" \
                | curl -s -X "$1" -D "$header_file" \
                  -A "$useragent" -H "Authorization: $bot$token" \
                  -H "Content-Type: application/json" \
                  "https://discordapp.com/api/v6$2" -d @-
            else
                true | curl -s -X "$1" -D "$header_file" \
                -A "$useragent" -H "Authorization: $bot$token" \
                "https://discordapp.com/api/v6$2" -d @-
            fi

        fi

        headers="$(cat "$header_file")"
        if _429_handling "$headers" "$result"; then
            printf '%s\n' "$result"
            _predict_limit "$headers"
            return "$(_ret_code "$headers")"
        fi
    done
}

_format_args(){
    read -r payload
    case "$1" in
    'json')
        [ -n "$3" ] && extra=",($3)"
        printf '%s\n' "$payload" \
        | jq -cMr "({$2} | with_entries(select(.value!=null)))$extra" ;;
    'url')
        url_code="({$2} | with_entries(select(.value!=null))"
        url_code="$url_code | keys[] as \$k | \"\(\$k)=\(.[\$k])&\")"
        url="$(printf '%s\n' "$payload" | jq -jr "$url_code")"

        ([ -n "$url" ] && printf '?%s\n' "${url%?}") || printf "\n"
        [ -n "$3" ] && printf '%s\n' "$(printf '%s\n' "$payload" | jq -r "$3")"
    esac
}

# shellcheck disable=SC2046
_explain(){
    rcommand="$1"; route="$2"; rtype="$3"; data_args="$4"; url_args="$5"
    
    set -- $(printf '%s\n' "$url_args" | sed 's/,\./ $/g; s/.\.*/$/')
    url="$(eval "printf '%s\\n' \"$route\"")"

    unset args
    if [ -n "$data_args" ]; then
        case "$rtype" in
        'json') 
            args=" with {$data_args}";;
        'url')
            code="({$data_args} | keys[] as \$k | \"\(\$k)=\$\(\$k)\")"
            args="?$(printf '{}\n' | jq -r "$code" | tr '\n' '&' \
                     | sed "s/.$//")" ;;
        esac
    fi

    printf '%s %s%s\n' "$rcommand" "$url" "$args" >&2
}

# shellcheck disable=SC2046
_route(){
    read -r text
    [ "$text" = '?' ] && _explain "$1" "$2" "$3" "$4" "$5" && return 1

    rcommand="$1"; route="$2"; rtype="$3"; data_args="$4"; url_args="$5"

    data="$(printf '%s\n' "$text" \
            | _format_args "$rtype" "$data_args" "$url_args")"
   
    set -- $(printf '%s\n' "$data" | tail -n +2)
    url="$(eval "printf '%s\\n' \"$route\"")"

    args="$(printf '%s\n' "$data" | head -n 1)"
    [ "$args" = "{}" ] && args=' '

    case "$rtype" in
    'json') printf '%s\n' "$args" | _dapi "$rcommand" "$url" ;;
    'url') printf ' \n' | _dapi "$rcommand" "$url$args" ;;
    esac
}

_check_option(){
    option="$1"; shift
    name="$1"; shift

    for x in "$@"; do
        [ "$x" = "$option" ] && return 0
    done
        
    spaces=0
    for x in "$@"; do
        [ "${#x}" -gt "$spaces" ] && spaces="${#x}"
    done
    spaces="$(( spaces + 4 ))"

    printf 'usage: mash_api %s COMMAND\n' "$name" >&2
    printf '%s\n' 'Avaliable commands:' >&2
    for x in "$@"; do
        printf '%s' "$x" >&2
        printf '%*c' "$(( spaces - ${#x} ))" ' ' >&2

        code="$(printf '?\n' | eval "$name $x" 2>&1)"
        while [ "${#code}" -gt "$((80 - spaces))" ]; do
            printf '%s\n' "$(printf '%s\n' "$code" | cut -c -79)" >&2
            code="$(printf '%s\n' "$code" | cut -c 80-)"
            [ -n "$code" ] && printf '%*c' "$spaces" ' ' >&2
        done
        [ -n "$code" ] && printf '%s\n' "$code" >&2
    done

    return 1
}

channel() {
    _check_option "$1" channel get new edit del list dm_add dm_remove \
                               pos_edit perm_edit perm_delete

    case "$1" in
    'get') _route 'GET' '/channels/$1' 'json' '' '.id' ;;
    'new')
        data_args='name,type,topic,bitrate,user_limit,rate_limit_per_user'
        data_args="$data_args,position,permission_overwrites,parent_id"
        data_args="$data_args,nsfw"
        _route 'POST' '/guilds/$1/channels' 'json' "$data_args" '.guild' ;;
    'edit')
        data_args='name,topic,bitrate,user_limit,rate_limit_per_user'
        data_args="$data_args,position,permission_overwrites,parent_id"
        data_args="$data_args,nsfw"
        _route 'PATCH' '/channels/$1' 'json' "$data_args" '.id' ;;
    'del') _route 'DELETE' '/channels/$1' 'json' '' '.id' ;;
    'list') _route 'GET' '/guilds/$1/channels' 'json' '' '.guild' ;;
    'dm_add') _route 'PUT' '/channels/$1/recipients/$2' 'json' '' \
                     '.id,.user' ;;
    'dm_remove') _route 'DELETE' '/channels/$1/recipients/$2' 'json' '' \
                        '.id,.user' ;;
    'pos_edit') _route 'PATCH' '/guilds/$1/channels' 'json' 'data' '.guild' ;;
    'perm_edit') _route 'PUT' '/channels/$1/permissions/$2' 'json' \
                        'allow,deny,type' '.channel,.id' ;;
    'perm_delete') _route 'DELETE' '/channels/$1/permissions/$2' 'json' '' \
                          '.channel,.id' ;;
    esac
}

emoji() {
    _check_option "$1" emoji get new edit del list

    case "$1" in
    'get') _route 'GET' '/guilds/$1/emojis/$2' 'json' '' '.guild,.id' ;;
    'new') _route 'POST' '/guilds/$1/emojis' 'json' 'name,image,roles' \
                  '.guild' ;;
    'edit') _route 'PATCH' '/guilds/$1/emojis/$2' 'json' 'name,roles' \
                   '.guild,.id' ;;
    'del') _route 'DELETE' '/guilds/$1/emojis/$2' 'json' '' '.guild,.id' ;;
    'list') _route 'GET' '/guilds/$1/emojis' 'json' '' '.guild' ;;
    esac
}

guild(){
    _check_option "$1" guild get new edit del leave embed_get embed_edit \
                             audit_log vanity_url widget

    case "$1" in
    'get') _route 'GET' '/guilds/$1' 'json' '' '.guild' ;;
    'new')
        data_args='name,region,icon,verification_level'
        data_args="$data_args,default_message_notifications"
        data_args="$data_args,explicit_content_filter,roles,channels"
        _route 'POST' '/guilds' 'json' "$data_args" '' ;;
    'edit')
        data_args='name,region,verification_level'
        data_args="$data_args,default_message_notifications"
        data_args="$data_args,explicit_content_filter,afk_channel_id"
        data_args="$data_args,afk_timeout,icon,owner_id,splash"
        data_args="$data_args,system_channel_id"
        _route 'PATCH' '/guilds/$1' 'json' "$data_args" '.guild' ;;
    'del') _route 'DELETE' '/guilds/$1' 'json' '' '.guild' ;;
    'leave') _route 'DELETE' '/users/@me/guilds/$1' 'json' '' '.guild' ;;
    'embed_get') _route 'GET' '/guilds/$1/embed' 'json' '' '.guild' ;;
    'embed_edit') _route 'PATCH' '/guilds/$1/embed' 'json' \
                         'enabled,channel_id' '.guild' ;;
    'audit_log')
        data_args='user_id,action_type,before,limit'
        _route 'GET' '/guilds/$1/audit-logs' 'url' "$data_args" '.guild' ;;
    'vanity_url') _route 'GET' '/guilds/$1/vanity-url' 'json' '' '.guild' ;;
    'widget') _route 'GET' '/guilds/$1/widget.png' 'url' 'style' '.guild' ;;
    esac
}

integration() {
    _check_option "$1" integration get new edit del sync 

    case "$1" in
    'get') _route 'GET' '/guilds/$1/integrations' 'json' '' '.guild' ;;
    'new') _route 'POST' '/guilds/$1/integrations' 'json' 'id,type' '.guild' ;;
    'edit') _route 'PATCH' '/guilds/$1/integrations/$2' 'json' \
                   'expire_behavior,expire_grace_period,enable_emoticons' \
                   '.guild,.id' ;;
    'del') _route 'DELETE' '/guilds/$1/integrations/$2' 'json' '' \
                  '.guild,.id' ;;
    'sync') _route 'POST' '/guilds/$1/integrations/$2/sync' 'json' '' \
                   '.guild,.id' ;;
    esac
}

invite() {
    _check_option "$1" invite get new del list_ch list_g

    case "$1" in
    'get') _route 'GET' '/invites/$1' 'json' '' '.code' ;;
    'new') _route 'POST' '/channels/$1/invites' 'json' \
                      'max_age,max_uses,temporary,unique' '.channel' ;;
    'del') _route 'DELETE' '/invites/$1' 'json' '' '.code' ;;
    'list_ch') _route 'GET' '/channels/$1/invites' 'json' '' '.id' ;;
    'list_g') _route 'GET' '/guilds/$1/invites' 'json' '' '.id' ;;
    esac
}

member() {
    _check_option "$1" member get new edit del list rename_me

    case "$1" in
    'get') _route 'GET' '/guilds/$1/members/$2' 'json' '' '.guild,.id' ;;
    'new') _route 'PUT' '/guilds/$1/members/$2' 'json' \
                  'access_token,nick,roles,mute,deaf' '.guild,.id' ;;
    'edit') _route 'PATCH' '/guilds/$1/members/$2' 'json' \
                   'nick,roles,mute,deaf,channel_id' '.guild,.id' ;;
    'del') _route 'DELETE' '/guilds/$1/members/$2' 'json' '' '.guild,.id' ;;
    'list') _route 'GET' '/guilds/$1/members' 'url' 'limit,after' '.guild' ;;
    'rename_me') _route 'PATCH' '/guilds/$1/members/@me/nick' 'json' 'nick' \
                        '.guild' ;;
    esac
}

message() {
    _check_option "$1" message type get send edit delete pin unpin pins \
                               bulk_get bulk_delete

    case "$1" in
    'type') _route 'POST' '/channels/$1/typing' 'json' '' '.channel' ;;
    'get') _route 'GET' '/channels/$1/messages/$2' 'json' '' '.channel,.id' ;;
    'send')
        data_args='content,embed,nonce,tts,allowed_mentions'
        url_args='.files,.channel'

        read -r text
        if [ "$text" = '?' ]; then
            printf 'POST /channels/$channel/messages '
            printf 'with {%s} and $files (arr of paths)\n' "$data_args"
            return 1
        fi

        data="$(printf '%s\n' "$text" | _format_args json "$data_args" \
                                        "$url_args")"
        json="$(printf '%s\n' "$data" | head -n 1)"
        params="$(printf '%s\n' "$data" | tail -n +2)"
        
        files="$(printf '%s\n' "$params" | head -n 1)"
        channel="$(printf '%s\n' "$params" | tail -n 1)"
        if [ "$files" = 'null' ]; then
            printf '%s\n' "$json" | _dapi POST "/channels/$channel/messages"
        else
            printf '%s\n' "$json" | _dapi @FILES \
                                    "/channels/$channel/messages" "$files"
        fi ;;
    'edit') _route 'PATCH' '/channels/$1/messages/$2' 'json' \
                   'content,embed,flags' '.channel,.id' ;;
    'delete') _route 'DELETE' '/channels/$1/messages/$2' 'json' '' \
                     '.channel,.id' ;;
    'pin') _route 'PUT' '/channels/$1/pins/$2' 'json' '' '.channel,.id' ;;
    'unpin') _route 'DELETE' '/channels/$1/pins/$2' 'json' '' '.channel,.id' ;;
    'pins') _route 'GET' '/channels/$1/pins' 'json' '' '.channel' ;;
    'bulk_get') _route 'GET' '/channels/$1/messages' 'url' \
                       'before,after,around,limit' '.channel' ;;
    'bulk_delete') _route 'POST' '/channels/$1/messages/bulk-delete' 'json' \
                          'messages' '.channel' ;;
    esac
}

moderation() {
    _check_option "$1" moderation ban unban get_ban get_bans prune count_prune

    case "$1" in
    'ban') _route 'PUT' '/guilds/$1/bans/$2' 'url' \
                  'reason,"delete-message-days"' '.guild,.id' ;;
    'unban') _route 'DELETE' '/guilds/$1/bans/$2' 'json' '' '.guild,.id' ;;
    'get_ban') _route 'GET' '/guilds/$1/bans/$2' 'json' '' '.guild,.id' ;;
    'get_bans') _route 'GET' '/guilds/$1/bans' 'json' '' '.guild' ;;
    'prune') _route 'POST' '/guilds/$1/prune' 'url' \
                    'days,"compute-prune-count"' '.guild' ;;
    'count_prune') _route 'GET' '/guilds/$1/prune' 'url' 'days' '.guild' ;;
    esac
}

reaction() {
    _check_option "$1" reaction get add del del_mod del_all del_all_for_emoji

    case "$1" in
    'get') _route 'GET' '/channels/$1/messages/$2/reactions/$3' 'url' \
                  'before,after,limit' '.channel,.id,.emoji' ;;
    'add') _route 'PUT' '/channels/$1/messages/$2/reactions/$3/@me' \
                  'json' '' '.channel,.id,.emoji' ;;
    'del') _route 'DELETE' '/channels/$1/messages/$2/reactions/$3/@me' \
                  'json' '' '.channel,.id,.emoji' ;;
    'del_mod') _route 'DELETE' '/channels/$1/messages/$2/reactions/$3/$4' \
                      'json' '' '.channel,.id,.emoji,.author' ;;
    'del_all') _route 'DELETE' '/channels/$1/messages/$2/reactions' \
                      'json' '' '.channel,.id' ;;
    'del_all_for_emoji')
        _route 'DELETE' '/channels/$1/messages/$2/reactions/$3' \
               'json' '' '.channel,.id,.emoji' ;;
    esac
}

role() {
    _check_option "$1" role new edit del list give take pos_edit

    case "$1" in
    'new') _route 'POST' '/guilds/$1/roles' 'json' \
                  'name,permissions,color,hoist,mentionable' '.guild' ;;
    'edit') _route 'PATCH' '/guilds/$1/roles/$2' 'json' \
                   'name,permissions,color,hoist,mentionable' '.guild,.id' ;;
    'del') _route 'DELETE' '/guilds/$1/roles/$2' 'json' '' '.guild,.id' ;;
    'list') _route 'GET' '/guilds/$1/roles' 'json' '' '.guild' ;;
    'give') _route 'PUT' '/guilds/$1/members/$2/roles/$3' 'json' '' \
                   '.guild,.user,.id' ;;
    'take') _route 'DELETE' '/guilds/$1/members/$2/roles/$3' 'json' '' \
                   '.guild,.user,.id' ;;
    'pos_edit') _route 'PATCH' '/guilds/$1/roles' 'json' 'data' '.guild' ;;
    esac
}

user() {
    _check_option "$1" user get edit new_dm dms guilds connections

    case "$1" in
    'get') _route 'GET' '/users/$1' 'json' '' '.id' ;;
    'edit') _route 'PATCH' '/users/@me' 'json' 'name,avatar' '' ;;
    'new_dm') _route 'POST' '/users/@me/channels' 'json' 'recipient_id' '' ;;
    'dms') _route 'GET' '/users/@me/channels' 'json' '' '' ;;
    'guilds') _route 'GET' '/users/@me/guilds' 'url' 'before,after,limit' '' ;;
    'connections') _route 'GET' '/users/@me/connections' 'json' '' '' ;;
    esac
}

webhook(){
    _check_option "$1" webhook exec get edit del list_ch list_g

    case "$1" in
    'exec')
        read -r text
        data_args='content,embeds,username,avatar_url,tts,allowed_mentions'
        url_args='.files,.id,(if .token = null then "" else "/\(.token)"'
        url_args="$url_args end)"

        if [ "$text" = '?' ]; then
            printf 'POST /webhooks/$id$token '
            printf 'with {%s} and $files (arr of paths)\n' "$data_args"
            return 1
        fi

        data="$(printf '%s\n' "$text" | _format_args json "$data_args" \
                                        "$url_args")"
        json="$(printf '%s\n' "$data" | head -n 1)"
        params="$(printf '%s\n' "$data" | tail -n +2)"
        
        files="$(printf '%s\n' "$params" | sed '1!d')"
        id="$(printf '%s\n' "$params" | sed '2!d')"
        token="$(printf '%s\n' "$params" | sed '3!d')"
        if [ "$files" = 'null' ]; then
            printf '%s\n' "$json" | _dapi POST "/webhooks/$id$token"
        else
            printf '%s\n' "$json" | _dapi @FILES \
                                    "/webhooks/$id$token" "$files"
        fi ;;
    'get') _route 'GET' '/webhooks/$1$2' 'json' '' '.id,.token' ;;
    'edit') _route 'PATCH' '/webhooks/$1$2' 'json' '' '.id,.token' ;;
    'del') _route 'DELETE' '/webhooks/$1$2' 'json' '' '.id,.token' ;;
    'list_ch') _route 'GET' '/channels/$1/webhooks' 'json' '' '.id' ;;
    'list_g') _route 'GET' '/guilds/$1/webhooks' 'json' '' '.id' ;;
    esac
}

option="$1"; shift
case "$option" in
    channel|emoji|guild|integration|invite|member \
    |message|moderation|reaction|role|user|webhook) "$option" "$@" ;;
    *) 
        printf '%s\n' 'usage: mash_api CATEGORY COMMAND' >&2
        printf '%s\n' 'Avaliable categories:' 
        printf '%s\n' 'channel emoji guild integration' >&2
        printf '%s\n' 'invite member message moderation' >&2
        printf '%s\n' 'reaction role user webhook' >&2
        exit 1 ;;
esac
