#!/bin/bash

if [ -z "$2" ]; then
        echo "Usage: ws-shard {SHARD} {NUM_SHARDS}" >&2
        echo "Creates a connection with the gateway, always exit 1"
        exit 1
fi

SHARD="$1"; SHARDS="$2"

PIPE="$MASH_STATUS_DIR/ws_pipe_$1"
rm -f "$PIPE"; mkfifo "$PIPE"

LOGF="$MASH_STATUS_DIR/ws_log_$1"; touch "$LOGF"
LATF="$MASH_STATUS_DIR/ws_latency_$1"; touch "$LATF"
ACKF="$MASH_STATUS_DIR/ws_lastack_$1"; touch "$ACKF"
SESF="$MASH_STATUS_DIR/ws_sessionid_$1"

ws-funnel "$1" &
trap "kill -9 $! 2>/dev/null" EXIT

last-seq(){
	SEQ="$(tail -n1 "$LOGF" | grep -oP '(?<="s":).*?(?=,)')"
	echo "${SEQ:-0}"
}

heartbeat(){
	LACK="0"; WAIT=15
	INTERVAL="$(awk "BEGIN { print ($1 / 1000) - $WAIT  }")"
	while : ; do
		last-seq | ws-send 1 "$SHARD" 

		ACK=$(cat "$ACKF")
		sleep "$WAIT"
		[ "$LACK" == "${ACK}" ] && (echo "null" | ws-send -1 "$SHARD")
		echo "$(( ACK - LACK ))" >> "$LATF" 
		sleep "$INTERVAL"
		LACK="$ACK"
	done
}

dispatch-event(){
	#read -r PAYLOAD
	PAYLOAD="$1"

	OP="$(echo "$PAYLOAD" | grep -oP '(?<="op":).*?(?=,)')"
	case $OP in
	0)
	echo "$PAYLOAD" >> "$LOGF"

	TSD="$(echo "$PAYLOAD" | grep -oP '(?<="t":").*?(?=",)|(?<="s":).*?(?=,)|(?<="d":).*' | head --bytes -2)"
	mapfile -t TSD <<< "$TSD"
	T="${TSD[0]}"; S="${TSD[1]}"; D="${TSD[2]}"

	[ "$T" == 'READY' ] && (echo "$D" | jq -r '.session_id' > "$SESF")

	echo "$T $D" ;; 	
	7)
	echo "null" | ws-send -1 "$SHARD";;
	9)
	rm -f "$SESF"; rm -f "$LOGF"
	echo "null" | ws-send -1 "$SHARD";;
	10)

	if [ -f "$SESF" ]; then
		echo "{\"token\": \"$MASH_AUTH_TOKEN\", \"session_id\": \"$(cat "$SESF")\", \"seq\": $(last-seq)}" | ws-send 6 "$SHARD"
	else	
		echo "{\"token\": \"$MASH_AUTH_TOKEN\", \"properties\": {\"\$os\": \"linux\",\"\$browser\": \"mash\",\"\$device\": \"mash\"}, \"shard\": [$SHARD, $SHARDS]}" | ws-send 2 "$SHARD" 
	fi 
	INTERVAL=$(echo "$PAYLOAD" | jq -r '.d|.heartbeat_interval'); heartbeat "$INTERVAL" & 
	trap "kill -9 $! 2>/dev/null" EXIT ;;
	11) echo "$(date +%s%N)" > "$ACKF" ;;
	esac	
}

. `which env_parallel.bash`
URL="wss://gateway.discord.gg/?v=6&encoding=json"
DUMMY="{\"op\":-1, \"d\": null}"
JOBS="$(parallel --number-of-threads)"
tail -f > "$PIPE" &
(websocat -S -tnE "$URL" < "$PIPE") | (for x in $(seq "$JOBS"); do echo "$DUMMY"; done; cat) | env_parallel --lb -q dispatch-event
exit 1
